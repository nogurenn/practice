// Code generated by mockery v2.50.4. DO NOT EDIT.

package artist

import (
	artist "github.com/nogurenn/practice/golang/music-api/internal/artist"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/nogurenn/practice/golang/music-api/internal/transaction"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with no fields
func (_m *Repository) BeginTx() (transaction.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() (transaction.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() transaction.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Repository_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
func (_e *Repository_Expecter) BeginTx() *Repository_BeginTx_Call {
	return &Repository_BeginTx_Call{Call: _e.mock.On("BeginTx")}
}

func (_c *Repository_BeginTx_Call) Run(run func()) *Repository_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_BeginTx_Call) Return(_a0 transaction.Transaction, _a1 error) *Repository_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_BeginTx_Call) RunAndReturn(run func() (transaction.Transaction, error)) *Repository_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// CountAll provides a mock function with given fields: tx
func (_m *Repository) CountAll(tx transaction.Transaction) (int, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (int, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) int); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type Repository_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - tx transaction.Transaction
func (_e *Repository_Expecter) CountAll(tx interface{}) *Repository_CountAll_Call {
	return &Repository_CountAll_Call{Call: _e.mock.On("CountAll", tx)}
}

func (_c *Repository_CountAll_Call) Run(run func(tx transaction.Transaction)) *Repository_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction))
	})
	return _c
}

func (_c *Repository_CountAll_Call) Return(_a0 int, _a1 error) *Repository_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CountAll_Call) RunAndReturn(run func(transaction.Transaction) (int, error)) *Repository_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// CountAllByName provides a mock function with given fields: tx, name
func (_m *Repository) CountAllByName(tx transaction.Transaction, name string) (int, error) {
	ret := _m.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for CountAllByName")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string) (int, error)); ok {
		return rf(tx, name)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string) int); ok {
		r0 = rf(tx, name)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, string) error); ok {
		r1 = rf(tx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountAllByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAllByName'
type Repository_CountAllByName_Call struct {
	*mock.Call
}

// CountAllByName is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - name string
func (_e *Repository_Expecter) CountAllByName(tx interface{}, name interface{}) *Repository_CountAllByName_Call {
	return &Repository_CountAllByName_Call{Call: _e.mock.On("CountAllByName", tx, name)}
}

func (_c *Repository_CountAllByName_Call) Run(run func(tx transaction.Transaction, name string)) *Repository_CountAllByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(string))
	})
	return _c
}

func (_c *Repository_CountAllByName_Call) Return(_a0 int, _a1 error) *Repository_CountAllByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CountAllByName_Call) RunAndReturn(run func(transaction.Transaction, string) (int, error)) *Repository_CountAllByName_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, a
func (_m *Repository) Create(tx transaction.Transaction, a *artist.Artist) error {
	ret := _m.Called(tx, a)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, *artist.Artist) error); ok {
		r0 = rf(tx, a)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - a *artist.Artist
func (_e *Repository_Expecter) Create(tx interface{}, a interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", tx, a)}
}

func (_c *Repository_Create_Call) Run(run func(tx transaction.Transaction, a *artist.Artist)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(*artist.Artist))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(transaction.Transaction, *artist.Artist) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateArtistGenres provides a mock function with given fields: tx, artistID, genreIDs
func (_m *Repository) CreateArtistGenres(tx transaction.Transaction, artistID uuid.UUID, genreIDs []uuid.UUID) error {
	ret := _m.Called(tx, artistID, genreIDs)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtistGenres")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uuid.UUID, []uuid.UUID) error); ok {
		r0 = rf(tx, artistID, genreIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateArtistGenres_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateArtistGenres'
type Repository_CreateArtistGenres_Call struct {
	*mock.Call
}

// CreateArtistGenres is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - artistID uuid.UUID
//   - genreIDs []uuid.UUID
func (_e *Repository_Expecter) CreateArtistGenres(tx interface{}, artistID interface{}, genreIDs interface{}) *Repository_CreateArtistGenres_Call {
	return &Repository_CreateArtistGenres_Call{Call: _e.mock.On("CreateArtistGenres", tx, artistID, genreIDs)}
}

func (_c *Repository_CreateArtistGenres_Call) Run(run func(tx transaction.Transaction, artistID uuid.UUID, genreIDs []uuid.UUID)) *Repository_CreateArtistGenres_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(uuid.UUID), args[2].([]uuid.UUID))
	})
	return _c
}

func (_c *Repository_CreateArtistGenres_Call) Return(_a0 error) *Repository_CreateArtistGenres_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateArtistGenres_Call) RunAndReturn(run func(transaction.Transaction, uuid.UUID, []uuid.UUID) error) *Repository_CreateArtistGenres_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: tx, p
func (_m *Repository) GetAll(tx transaction.Transaction, p *transaction.Pagination) ([]artist.Artist, error) {
	ret := _m.Called(tx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []artist.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, *transaction.Pagination) ([]artist.Artist, error)); ok {
		return rf(tx, p)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, *transaction.Pagination) []artist.Artist); ok {
		r0 = rf(tx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]artist.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, *transaction.Pagination) error); ok {
		r1 = rf(tx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - p *transaction.Pagination
func (_e *Repository_Expecter) GetAll(tx interface{}, p interface{}) *Repository_GetAll_Call {
	return &Repository_GetAll_Call{Call: _e.mock.On("GetAll", tx, p)}
}

func (_c *Repository_GetAll_Call) Run(run func(tx transaction.Transaction, p *transaction.Pagination)) *Repository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(*transaction.Pagination))
	})
	return _c
}

func (_c *Repository_GetAll_Call) Return(_a0 []artist.Artist, _a1 error) *Repository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAll_Call) RunAndReturn(run func(transaction.Transaction, *transaction.Pagination) ([]artist.Artist, error)) *Repository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByName provides a mock function with given fields: tx, name, p
func (_m *Repository) GetAllByName(tx transaction.Transaction, name string, p *transaction.Pagination) ([]artist.Artist, error) {
	ret := _m.Called(tx, name, p)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByName")
	}

	var r0 []artist.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string, *transaction.Pagination) ([]artist.Artist, error)); ok {
		return rf(tx, name, p)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string, *transaction.Pagination) []artist.Artist); ok {
		r0 = rf(tx, name, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]artist.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, string, *transaction.Pagination) error); ok {
		r1 = rf(tx, name, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAllByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByName'
type Repository_GetAllByName_Call struct {
	*mock.Call
}

// GetAllByName is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - name string
//   - p *transaction.Pagination
func (_e *Repository_Expecter) GetAllByName(tx interface{}, name interface{}, p interface{}) *Repository_GetAllByName_Call {
	return &Repository_GetAllByName_Call{Call: _e.mock.On("GetAllByName", tx, name, p)}
}

func (_c *Repository_GetAllByName_Call) Run(run func(tx transaction.Transaction, name string, p *transaction.Pagination)) *Repository_GetAllByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(string), args[2].(*transaction.Pagination))
	})
	return _c
}

func (_c *Repository_GetAllByName_Call) Return(_a0 []artist.Artist, _a1 error) *Repository_GetAllByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAllByName_Call) RunAndReturn(run func(transaction.Transaction, string, *transaction.Pagination) ([]artist.Artist, error)) *Repository_GetAllByName_Call {
	_c.Call.Return(run)
	return _c
}

// GetBySpotifyArtistID provides a mock function with given fields: tx, spotifyArtistID
func (_m *Repository) GetBySpotifyArtistID(tx transaction.Transaction, spotifyArtistID string) (*artist.Artist, error) {
	ret := _m.Called(tx, spotifyArtistID)

	if len(ret) == 0 {
		panic("no return value specified for GetBySpotifyArtistID")
	}

	var r0 *artist.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string) (*artist.Artist, error)); ok {
		return rf(tx, spotifyArtistID)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string) *artist.Artist); ok {
		r0 = rf(tx, spotifyArtistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*artist.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, string) error); ok {
		r1 = rf(tx, spotifyArtistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetBySpotifyArtistID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBySpotifyArtistID'
type Repository_GetBySpotifyArtistID_Call struct {
	*mock.Call
}

// GetBySpotifyArtistID is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - spotifyArtistID string
func (_e *Repository_Expecter) GetBySpotifyArtistID(tx interface{}, spotifyArtistID interface{}) *Repository_GetBySpotifyArtistID_Call {
	return &Repository_GetBySpotifyArtistID_Call{Call: _e.mock.On("GetBySpotifyArtistID", tx, spotifyArtistID)}
}

func (_c *Repository_GetBySpotifyArtistID_Call) Run(run func(tx transaction.Transaction, spotifyArtistID string)) *Repository_GetBySpotifyArtistID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(string))
	})
	return _c
}

func (_c *Repository_GetBySpotifyArtistID_Call) Return(_a0 *artist.Artist, _a1 error) *Repository_GetBySpotifyArtistID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetBySpotifyArtistID_Call) RunAndReturn(run func(transaction.Transaction, string) (*artist.Artist, error)) *Repository_GetBySpotifyArtistID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
