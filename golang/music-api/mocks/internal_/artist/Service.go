// Code generated by mockery v2.50.4. DO NOT EDIT.

package artist

import (
	artist "github.com/nogurenn/practice/golang/music-api/internal/artist"
	mock "github.com/stretchr/testify/mock"

	null "gopkg.in/guregu/null.v4"

	pagination "github.com/nogurenn/practice/golang/music-api/internal/pagination"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// GetArtistBySpotifyArtistID provides a mock function with given fields: spotifyArtistID
func (_m *Service) GetArtistBySpotifyArtistID(spotifyArtistID string) (*artist.Artist, []string, error) {
	ret := _m.Called(spotifyArtistID)

	if len(ret) == 0 {
		panic("no return value specified for GetArtistBySpotifyArtistID")
	}

	var r0 *artist.Artist
	var r1 []string
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (*artist.Artist, []string, error)); ok {
		return rf(spotifyArtistID)
	}
	if rf, ok := ret.Get(0).(func(string) *artist.Artist); ok {
		r0 = rf(spotifyArtistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*artist.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(string) []string); ok {
		r1 = rf(spotifyArtistID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(spotifyArtistID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_GetArtistBySpotifyArtistID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtistBySpotifyArtistID'
type Service_GetArtistBySpotifyArtistID_Call struct {
	*mock.Call
}

// GetArtistBySpotifyArtistID is a helper method to define mock.On call
//   - spotifyArtistID string
func (_e *Service_Expecter) GetArtistBySpotifyArtistID(spotifyArtistID interface{}) *Service_GetArtistBySpotifyArtistID_Call {
	return &Service_GetArtistBySpotifyArtistID_Call{Call: _e.mock.On("GetArtistBySpotifyArtistID", spotifyArtistID)}
}

func (_c *Service_GetArtistBySpotifyArtistID_Call) Run(run func(spotifyArtistID string)) *Service_GetArtistBySpotifyArtistID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Service_GetArtistBySpotifyArtistID_Call) Return(_a0 *artist.Artist, _a1 []string, _a2 error) *Service_GetArtistBySpotifyArtistID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Service_GetArtistBySpotifyArtistID_Call) RunAndReturn(run func(string) (*artist.Artist, []string, error)) *Service_GetArtistBySpotifyArtistID_Call {
	_c.Call.Return(run)
	return _c
}

// GetArtists provides a mock function with given fields: name, page, limit
func (_m *Service) GetArtists(name null.String, page int, limit int) ([]artist.Artist, *pagination.ServicePaginationMetadata, error) {
	ret := _m.Called(name, page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetArtists")
	}

	var r0 []artist.Artist
	var r1 *pagination.ServicePaginationMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(null.String, int, int) ([]artist.Artist, *pagination.ServicePaginationMetadata, error)); ok {
		return rf(name, page, limit)
	}
	if rf, ok := ret.Get(0).(func(null.String, int, int) []artist.Artist); ok {
		r0 = rf(name, page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]artist.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(null.String, int, int) *pagination.ServicePaginationMetadata); ok {
		r1 = rf(name, page, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.ServicePaginationMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(null.String, int, int) error); ok {
		r2 = rf(name, page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_GetArtists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetArtists'
type Service_GetArtists_Call struct {
	*mock.Call
}

// GetArtists is a helper method to define mock.On call
//   - name null.String
//   - page int
//   - limit int
func (_e *Service_Expecter) GetArtists(name interface{}, page interface{}, limit interface{}) *Service_GetArtists_Call {
	return &Service_GetArtists_Call{Call: _e.mock.On("GetArtists", name, page, limit)}
}

func (_c *Service_GetArtists_Call) Run(run func(name null.String, page int, limit int)) *Service_GetArtists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(null.String), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *Service_GetArtists_Call) Return(_a0 []artist.Artist, _a1 *pagination.ServicePaginationMetadata, _a2 error) *Service_GetArtists_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Service_GetArtists_Call) RunAndReturn(run func(null.String, int, int) ([]artist.Artist, *pagination.ServicePaginationMetadata, error)) *Service_GetArtists_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
