// Code generated by mockery v2.50.4. DO NOT EDIT.

package genre

import (
	genre "github.com/nogurenn/practice/golang/music-api/internal/genre"
	mock "github.com/stretchr/testify/mock"

	transaction "github.com/nogurenn/practice/golang/music-api/internal/transaction"

	uuid "github.com/google/uuid"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

type Repository_Expecter struct {
	mock *mock.Mock
}

func (_m *Repository) EXPECT() *Repository_Expecter {
	return &Repository_Expecter{mock: &_m.Mock}
}

// BeginTx provides a mock function with no fields
func (_m *Repository) BeginTx() (transaction.Transaction, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTx")
	}

	var r0 transaction.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func() (transaction.Transaction, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() transaction.Transaction); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(transaction.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_BeginTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BeginTx'
type Repository_BeginTx_Call struct {
	*mock.Call
}

// BeginTx is a helper method to define mock.On call
func (_e *Repository_Expecter) BeginTx() *Repository_BeginTx_Call {
	return &Repository_BeginTx_Call{Call: _e.mock.On("BeginTx")}
}

func (_c *Repository_BeginTx_Call) Run(run func()) *Repository_BeginTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Repository_BeginTx_Call) Return(_a0 transaction.Transaction, _a1 error) *Repository_BeginTx_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_BeginTx_Call) RunAndReturn(run func() (transaction.Transaction, error)) *Repository_BeginTx_Call {
	_c.Call.Return(run)
	return _c
}

// CountAll provides a mock function with given fields: tx
func (_m *Repository) CountAll(tx transaction.Transaction) (int, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CountAll")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction) (int, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction) int); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_CountAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountAll'
type Repository_CountAll_Call struct {
	*mock.Call
}

// CountAll is a helper method to define mock.On call
//   - tx transaction.Transaction
func (_e *Repository_Expecter) CountAll(tx interface{}) *Repository_CountAll_Call {
	return &Repository_CountAll_Call{Call: _e.mock.On("CountAll", tx)}
}

func (_c *Repository_CountAll_Call) Run(run func(tx transaction.Transaction)) *Repository_CountAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction))
	})
	return _c
}

func (_c *Repository_CountAll_Call) Return(_a0 int, _a1 error) *Repository_CountAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_CountAll_Call) RunAndReturn(run func(transaction.Transaction) (int, error)) *Repository_CountAll_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: tx, name
func (_m *Repository) Create(tx transaction.Transaction, name string) error {
	ret := _m.Called(tx, name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, string) error); ok {
		r0 = rf(tx, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Repository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - name string
func (_e *Repository_Expecter) Create(tx interface{}, name interface{}) *Repository_Create_Call {
	return &Repository_Create_Call{Call: _e.mock.On("Create", tx, name)}
}

func (_c *Repository_Create_Call) Run(run func(tx transaction.Transaction, name string)) *Repository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(string))
	})
	return _c
}

func (_c *Repository_Create_Call) Return(_a0 error) *Repository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_Create_Call) RunAndReturn(run func(transaction.Transaction, string) error) *Repository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// CreateMany provides a mock function with given fields: tx, names
func (_m *Repository) CreateMany(tx transaction.Transaction, names []string) error {
	ret := _m.Called(tx, names)

	if len(ret) == 0 {
		panic("no return value specified for CreateMany")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, []string) error); ok {
		r0 = rf(tx, names)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Repository_CreateMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateMany'
type Repository_CreateMany_Call struct {
	*mock.Call
}

// CreateMany is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - names []string
func (_e *Repository_Expecter) CreateMany(tx interface{}, names interface{}) *Repository_CreateMany_Call {
	return &Repository_CreateMany_Call{Call: _e.mock.On("CreateMany", tx, names)}
}

func (_c *Repository_CreateMany_Call) Run(run func(tx transaction.Transaction, names []string)) *Repository_CreateMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].([]string))
	})
	return _c
}

func (_c *Repository_CreateMany_Call) Return(_a0 error) *Repository_CreateMany_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Repository_CreateMany_Call) RunAndReturn(run func(transaction.Transaction, []string) error) *Repository_CreateMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: tx, p
func (_m *Repository) GetAll(tx transaction.Transaction, p *transaction.Pagination) ([]genre.Genre, error) {
	ret := _m.Called(tx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []genre.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, *transaction.Pagination) ([]genre.Genre, error)); ok {
		return rf(tx, p)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, *transaction.Pagination) []genre.Genre); ok {
		r0 = rf(tx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]genre.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, *transaction.Pagination) error); ok {
		r1 = rf(tx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Repository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - p *transaction.Pagination
func (_e *Repository_Expecter) GetAll(tx interface{}, p interface{}) *Repository_GetAll_Call {
	return &Repository_GetAll_Call{Call: _e.mock.On("GetAll", tx, p)}
}

func (_c *Repository_GetAll_Call) Run(run func(tx transaction.Transaction, p *transaction.Pagination)) *Repository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(*transaction.Pagination))
	})
	return _c
}

func (_c *Repository_GetAll_Call) Return(_a0 []genre.Genre, _a1 error) *Repository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetAll_Call) RunAndReturn(run func(transaction.Transaction, *transaction.Pagination) ([]genre.Genre, error)) *Repository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetExistingByNames provides a mock function with given fields: tx, names
func (_m *Repository) GetExistingByNames(tx transaction.Transaction, names []string) ([]genre.Genre, error) {
	ret := _m.Called(tx, names)

	if len(ret) == 0 {
		panic("no return value specified for GetExistingByNames")
	}

	var r0 []genre.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, []string) ([]genre.Genre, error)); ok {
		return rf(tx, names)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, []string) []genre.Genre); ok {
		r0 = rf(tx, names)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]genre.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, []string) error); ok {
		r1 = rf(tx, names)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetExistingByNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetExistingByNames'
type Repository_GetExistingByNames_Call struct {
	*mock.Call
}

// GetExistingByNames is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - names []string
func (_e *Repository_Expecter) GetExistingByNames(tx interface{}, names interface{}) *Repository_GetExistingByNames_Call {
	return &Repository_GetExistingByNames_Call{Call: _e.mock.On("GetExistingByNames", tx, names)}
}

func (_c *Repository_GetExistingByNames_Call) Run(run func(tx transaction.Transaction, names []string)) *Repository_GetExistingByNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].([]string))
	})
	return _c
}

func (_c *Repository_GetExistingByNames_Call) Return(_a0 []genre.Genre, _a1 error) *Repository_GetExistingByNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetExistingByNames_Call) RunAndReturn(run func(transaction.Transaction, []string) ([]genre.Genre, error)) *Repository_GetExistingByNames_Call {
	_c.Call.Return(run)
	return _c
}

// GetGenresByArtistID provides a mock function with given fields: tx, artistID
func (_m *Repository) GetGenresByArtistID(tx transaction.Transaction, artistID uuid.UUID) ([]genre.Genre, error) {
	ret := _m.Called(tx, artistID)

	if len(ret) == 0 {
		panic("no return value specified for GetGenresByArtistID")
	}

	var r0 []genre.Genre
	var r1 error
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uuid.UUID) ([]genre.Genre, error)); ok {
		return rf(tx, artistID)
	}
	if rf, ok := ret.Get(0).(func(transaction.Transaction, uuid.UUID) []genre.Genre); ok {
		r0 = rf(tx, artistID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]genre.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(transaction.Transaction, uuid.UUID) error); ok {
		r1 = rf(tx, artistID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Repository_GetGenresByArtistID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGenresByArtistID'
type Repository_GetGenresByArtistID_Call struct {
	*mock.Call
}

// GetGenresByArtistID is a helper method to define mock.On call
//   - tx transaction.Transaction
//   - artistID uuid.UUID
func (_e *Repository_Expecter) GetGenresByArtistID(tx interface{}, artistID interface{}) *Repository_GetGenresByArtistID_Call {
	return &Repository_GetGenresByArtistID_Call{Call: _e.mock.On("GetGenresByArtistID", tx, artistID)}
}

func (_c *Repository_GetGenresByArtistID_Call) Run(run func(tx transaction.Transaction, artistID uuid.UUID)) *Repository_GetGenresByArtistID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(transaction.Transaction), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *Repository_GetGenresByArtistID_Call) Return(_a0 []genre.Genre, _a1 error) *Repository_GetGenresByArtistID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Repository_GetGenresByArtistID_Call) RunAndReturn(run func(transaction.Transaction, uuid.UUID) ([]genre.Genre, error)) *Repository_GetGenresByArtistID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
