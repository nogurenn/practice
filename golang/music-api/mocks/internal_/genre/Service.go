// Code generated by mockery v2.50.4. DO NOT EDIT.

package genre

import (
	genre "github.com/nogurenn/practice/golang/music-api/internal/genre"
	mock "github.com/stretchr/testify/mock"

	pagination "github.com/nogurenn/practice/golang/music-api/internal/pagination"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

type Service_Expecter struct {
	mock *mock.Mock
}

func (_m *Service) EXPECT() *Service_Expecter {
	return &Service_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: name
func (_m *Service) Create(name string) error {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Service_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Service_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - name string
func (_e *Service_Expecter) Create(name interface{}) *Service_Create_Call {
	return &Service_Create_Call{Call: _e.mock.On("Create", name)}
}

func (_c *Service_Create_Call) Run(run func(name string)) *Service_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *Service_Create_Call) Return(_a0 error) *Service_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Service_Create_Call) RunAndReturn(run func(string) error) *Service_Create_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: page, limit
func (_m *Service) GetAll(page int, limit int) ([]genre.Genre, *pagination.ServicePaginationMetadata, error) {
	ret := _m.Called(page, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []genre.Genre
	var r1 *pagination.ServicePaginationMetadata
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) ([]genre.Genre, *pagination.ServicePaginationMetadata, error)); ok {
		return rf(page, limit)
	}
	if rf, ok := ret.Get(0).(func(int, int) []genre.Genre); ok {
		r0 = rf(page, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]genre.Genre)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) *pagination.ServicePaginationMetadata); ok {
		r1 = rf(page, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*pagination.ServicePaginationMetadata)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Service_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type Service_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - page int
//   - limit int
func (_e *Service_Expecter) GetAll(page interface{}, limit interface{}) *Service_GetAll_Call {
	return &Service_GetAll_Call{Call: _e.mock.On("GetAll", page, limit)}
}

func (_c *Service_GetAll_Call) Run(run func(page int, limit int)) *Service_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *Service_GetAll_Call) Return(_a0 []genre.Genre, _a1 *pagination.ServicePaginationMetadata, _a2 error) *Service_GetAll_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *Service_GetAll_Call) RunAndReturn(run func(int, int) ([]genre.Genre, *pagination.ServicePaginationMetadata, error)) *Service_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
